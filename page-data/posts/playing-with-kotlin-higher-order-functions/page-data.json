{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/playing-with-kotlin-higher-order-functions/","result":{"data":{"markdownRemark":{"id":"e0773886-34ba-588d-b85f-23a9225b50ef","html":"<blockquote>\n<p>Ported from <strong>Medium</strong>, original source <a href=\"https://android.jlelse.eu/playing-with-kotlin-higher-order-functions-aecce3d72a12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>\n</blockquote>\n<p>One of the cool things in Kotlin is having ability to pass around functions as objects. That’s where higher order functions come and allow us to write code more declaratively.</p>\n<p>I’m gonna list down some function blocks</p>\n<p>Let’s start with basic ones</p>\n<p>We often run into scenarios where we encapsulate logic inside try/catch block but just log the exception in catch block. Sometimes even the catch seems useless, <em>so…</em></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">justTry</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><br>\nAnd now we just forget the catch block</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">justTry <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">myFunctionWhichMayFail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br>\nSimilarly</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">debugMode</span><span class=\"token punctuation\">(</span>block <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BuildConfig<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">lollipopAndAbove</span><span class=\"token punctuation\">(</span>block <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>LOLLIPOP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> Context<span class=\"token punctuation\">.</span><span class=\"token function\">withNetwork</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> connectivityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>CONNECTIVITY_SERVICE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span>  ConnectivityManager\n    connectivityManager<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> netInfo <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>activeNetworkInfo\n        netInfo<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>netInfo<span class=\"token punctuation\">.</span>isConnected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>transforms to</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">debugMode <span class=\"token punctuation\">{</span>\n    StrictMode<span class=\"token punctuation\">.</span><span class=\"token function\">setThreadPolicy</span><span class=\"token punctuation\">(</span>StrictMode<span class=\"token punctuation\">.</span>ThreadPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">detectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">penaltyLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nlollipopAndAbove <span class=\"token punctuation\">{</span>\n    view<span class=\"token punctuation\">.</span>elevation <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span>\n<span class=\"token punctuation\">}</span>\n\nwithNetwork <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// make network request</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Again, this makes code more readable and looks nice :)</p>\n<blockquote>\n<p> But one should consider the logic which should be transformed into function block. The above code block only has if condition which works fine but if there needs to be an else section, we may wanna avoid function blocks. This is valid for <code class=\"language-text\">withConnection {}</code> where an else case may be required to show some message for network connectivity.</p>\n</blockquote>\n<p>Moving on to more cool stuff</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">asyncRxExecutor</span><span class=\"token punctuation\">(</span>heavyFunction<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">,</span> response <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>response <span class=\"token operator\">:</span> T<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">val</span> observable <span class=\"token operator\">=</span> Single<span class=\"token punctuation\">.</span>create<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">-></span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token function\">heavyFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nobservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeOn</span><span class=\"token punctuation\">(</span>Schedulers<span class=\"token punctuation\">.</span><span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">observeOn</span><span class=\"token punctuation\">(</span>AndroidSchedulers<span class=\"token punctuation\">.</span><span class=\"token function\">mainThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span> <span class=\"token punctuation\">{</span> t<span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token operator\">-></span>\n            <span class=\"token function\">response</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above code is a generic function which accepts a function as a first parameter, executes using RxJava observable in a new thread and then sends back response exposed as a lambda. Here is a sample usage</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">asyncRxExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">myHeavyFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> response <span class=\"token operator\">-></span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>So basically we took an arbitrary function which was already written or may be written in future , did it’s execution asynchronously and returned a result.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*A2gir0uUVzdlgiEkPUoyvQ.png\"></p>\n<p>We could use different mechanism for async execution like Kotlin Coroutines</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">asyncCoroutinesExecutor</span><span class=\"token punctuation\">(</span>heavyFunction<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">,</span> response <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>response <span class=\"token operator\">:</span> T<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">async</span><span class=\"token punctuation\">(</span>UI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span> <span class=\"token operator\">:</span> Deferred<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> bg <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">heavyFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">asyncCoroutinesExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">myHeavyFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> response <span class=\"token operator\">-></span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can similarly create an executor for running code on ui thread.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">uiThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">crossinline</span> block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> mainHandler <span class=\"token operator\">=</span> <span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>Looper<span class=\"token punctuation\">.</span><span class=\"token function\">getMainLooper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    mainHandler<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and…</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">thread <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">myHeavyFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    uiThreadExecutor <span class=\"token punctuation\">{</span>\n        view<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Just updating\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">myAnotherHeavyFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p> thread {} is provided by Kotlin itself for running code in a thread.</p>\n</blockquote>\n<p>This is just the tip of the iceberg of what we can do with higher order functions!\nI’m maintaining a repo where I add utilities like this. Have a look</p>\n<p><a href=\"https://github.com/jitinsharma/Kotlin.someExtensions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>jitinsharma/Kotlin.someExtensions</strong></a></p>","fields":{"slug":"/posts/playing-with-kotlin-higher-order-functions/","tagSlugs":["/tag/kotlin/"]},"frontmatter":{"date":"2017-12-07","description":"One of the cool things in Kotlin is having ability to pass around functions as objects. That’s where higher order functions come and allow us to write code more declaratively.","tags":["Kotlin"],"title":"Playing with Kotlin Higher Order Functions","banner":null}}},"pageContext":{"slug":"/posts/playing-with-kotlin-higher-order-functions/"}},"staticQueryHashes":["1122560877","251939775","401334301"]}