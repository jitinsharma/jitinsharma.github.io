{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/kotlin-serialization-librabry/","result":{"data":{"markdownRemark":{"id":"6f1b9222-eaef-51a4-8486-a8f8500f16ca","html":"<blockquote>\n<p>Ported from <strong>Medium</strong>, original source <a href=\"https://android.jlelse.eu/kotlin-serialization-library-38bf85d8768b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>\n</blockquote>\n<p>Kotlin has recently released a library for serialization. To put things in perspective, before this there was no serialization lib provided by kotlin but you could use any platform supported serialization libraries with Kotlin classes(eg. Gson for JVM/Android)</p>\n<p>But that’s where Kotlin’s serialization library is different, it’s cross platform and supports multiple formats. The whole lib is built on top of Kotlin’s multiplatform concept.</p>\n<p>Currently kotlinx.serialization supports three formats</p>\n<ul>\n<li>JSON</li>\n<li>CBOR</li>\n<li>Protobuf</li>\n</ul>\n<p>And platforms are JVM and JS, but others should get added soon as Kotlin/native becomes mature.</p>\n<p>Let’s take a look at JSON</p>\n<p>Marking <code class=\"language-text\">@Serializable</code> will make a class serializable.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Serializable</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Destination</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">var</span> country <span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">var</span> code <span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>stringify will convert a serializable object to JSON string.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> delhi <span class=\"token operator\">=</span> <span class=\"token function\">Destination</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Delhi\"</span><span class=\"token punctuation\">,</span> country <span class=\"token operator\">=</span> <span class=\"token string\">\"India\"</span><span class=\"token punctuation\">,</span> code <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> delhiAsString <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>delhi<span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>delhiAsString<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {\"name\":\"Delhi\",\"country\":\"India\",\"code\":0}</span></code></pre></div>\n<p>parse will convert well formed json back to a data class.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> newYork <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>parse<span class=\"token operator\">&lt;</span>Destination<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"{\\\"name\\\":\\\"New York\\\",\\\"country\\\":\\\"USA\\\",\\\"code\\\":3}\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>newYork<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Destination(name=New York, country=USA, code=3)</span></code></pre></div>\n<p>Parsing has multiple options like</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> paris <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>unquoted<span class=\"token punctuation\">.</span>parse<span class=\"token operator\">&lt;</span>Destination<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"{name:Paris,country:France,code:10}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>paris<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Destination(name=Paris, country=France, code=10)</span></code></pre></div>\n<p>In above example, json string doesn’t have quotes. We can parse such json with <code class=\"language-text\">JSON.unquoted</code>. This can be helpful during debugging.</p>\n<p>Here’s a definition of all such properties available</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3492/1*rVs5EHVIHD7OkRImEhkucA.png\"></p>\n<h3 id=\"additional-properties\" style=\"position:relative;\"><a href=\"#additional-properties\" aria-label=\"additional properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Additional Properties</strong></h3>\n<p>Often our data objects have properties which could be optional. For example, there could be extra properties which we initialize on client side which server may not provide while fetching the json. Similarly there may be properties which may or may not be present in json. Fortunately the lib handles both cases.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Optional</span>\n<span class=\"token keyword\">var</span> isMetro <span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token annotation builtin\">@Transient</span>\n<span class=\"token keyword\">var</span> favorite <span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>Optional — This value will considered during serialization/deserialization. but if not present, it won’t break serialization.</p>\n<p>Transient — This value will not be considered during serialization/deserialization. But if present in json, it will cause an exception.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> barcelona <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>unquoted<span class=\"token punctuation\">.</span>parse<span class=\"token operator\">&lt;</span>Destination<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"{name:Barcelona,country:Spain,code:5}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>barcelona<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Only optional and transient missing, so serialization works</span>\n<span class=\"token comment\">// Destination(name=Paris, country=France, code=10, isMetro=false, favorite=false)</span>\n\nbarcelona <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>unquoted<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"{name:Barcelona,country:Spain,code:5,isMetro:true}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>barcelona<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Destination(name=Barcelona, country=Spain, code=5, isMetro=true, favorite=false)</span>\n<span class=\"token comment\">// Optional property isMetro is updated but Transient property favorite remains same</span>\n\nbarcelona <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>unquoted<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"{name:Barcelona,code:5,isMetro=true}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// This will break as \"country\" is a required field.</span>\n\nbarcelona <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span>unquoted<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n        \"<span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span>Barcelona<span class=\"token punctuation\">,</span>country<span class=\"token operator\">:</span>Spaincode<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\nisMetro<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>favorite<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\"<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// This will break as \"favorite\" is not recognised by serializer</span></code></pre></div>\n<blockquote>\n<p> If you’re not sure about consistency of values in json, using JSON.nonstrict might be a good idea to avoid exceptions</p>\n</blockquote>\n<h3 id=\"class-variables-can-have-different-names-than-the-name-of-key-in-json-just-annotate-using-serialname\" style=\"position:relative;\"><a href=\"#class-variables-can-have-different-names-than-the-name-of-key-in-json-just-annotate-using-serialname\" aria-label=\"class variables can have different names than the name of key in json just annotate using serialname permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class variables can have different names than the name of key in json. Just annotate using @SerialName</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@SerialName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d_country\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> country <span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></code></pre></div>\n<h2 id=\"additional-utilities\" style=\"position:relative;\"><a href=\"#additional-utilities\" aria-label=\"additional utilities permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional Utilities</h2>\n<p>There are few utilities also available out of box</p>\n<p><strong>Mapper</strong></p>\n<p>Mapper can convert a object to a map — straightforward.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> newYorkAsMap <span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Any<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Mapper<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>newYork<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Mapping</span>\n<span class=\"token keyword\">val</span> newNewYork <span class=\"token operator\">=</span> Mapper<span class=\"token punctuation\">.</span>unmap<span class=\"token operator\">&lt;</span>Destination<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>newYorkAsMap<span class=\"token punctuation\">)</span> <span class=\"token comment\">//UnMapping</span>\n<span class=\"token comment\">// Use Mapper.mapNullable() to support null values</span></code></pre></div>\n<p><strong>ValueTransformer</strong></p>\n<p>Transformer allows custom transformation on each value of object.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">object</span> CustomTransformer <span class=\"token operator\">:</span> <span class=\"token function\">ValueTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">transformStringValue</span><span class=\"token punctuation\">(</span>desc<span class=\"token operator\">:</span> KSerialClassDesc<span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token operator\">=</span>\n            value<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">transformIntValue</span><span class=\"token punctuation\">(</span>desc<span class=\"token operator\">:</span> KSerialClassDesc<span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">when</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token number\">0</span> <span class=\"token operator\">-></span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">transformIntValue</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> newDelhi <span class=\"token operator\">=</span> CustomTransformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>delhi<span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>newDelhi<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Destination(name=delhi, country=india, code=1)</span>\n<span class=\"token comment\">// Strings are lowercase and integer code 0 became 1</span></code></pre></div>\n<p>There are more override methods for float, boolean etc in ValueTransform.</p>\n<p><strong>Custom Serialization</strong></p>\n<p>The lib allows you to define your own serialization scheme if required.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Serializable</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Country</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name <span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> hCode <span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@Serializer</span><span class=\"token punctuation\">(</span>forClass <span class=\"token operator\">=</span> Country<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> KSerializer<span class=\"token operator\">&lt;</span>Country<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> KInput<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Country <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write your own scheme to handle input\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>output<span class=\"token operator\">:</span> KOutput<span class=\"token punctuation\">,</span> obj<span class=\"token operator\">:</span> Country<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write your own scheme to handle output\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> serialClassDesc<span class=\"token operator\">:</span> KSerialClassDesc\n            <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Full doc here\n<a href=\"https://github.com/Kotlin/kotlinx.serialization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Kotlin/kotlinx.serialization</strong></a></p>\n<p>Code gist: <a href=\"https://gist.github.com/jitinsharma/8805cf63ba3b371b657531d55d3fd6c5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gist.github.com/jitinsharma/8805cf63ba3b371b657531d55d3fd6c5</a></p>\n<p>Thanks for reading!</p>","fields":{"slug":"/posts/kotlin-serialization-librabry/","tagSlugs":["/tag/kotlin/"]},"frontmatter":{"date":"2018-01-25","description":"Kotlin has recently released a library for serialization. To put things in perspective, before this there was no serialization lib provided by kotlin but you could use any platform supported serialization libraries with Kotlin classes(eg. Gson for JVM/Android).","tags":["Kotlin"],"title":"Kotlin Serialization Library","banner":null}}},"pageContext":{"slug":"/posts/kotlin-serialization-librabry/"}},"staticQueryHashes":["1122560877","251939775","401334301"]}