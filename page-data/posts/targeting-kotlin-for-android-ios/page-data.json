{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/targeting-kotlin-for-android-ios/","result":{"data":{"markdownRemark":{"id":"a3ae4631-1eb1-5a86-967e-4f5193d9a8e9","html":"<blockquote>\n<p>Ported from <strong>Medium</strong>, original source <a href=\"https://proandroiddev.com/targeting-kotlin-for-both-android-and-ios-dec5b967006a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>\n</blockquote>\n<p>Kotlin has been traditionally used as a language for JVM based platforms and has become highly popular in Android ecosystem. As the language matures, it is knocking on new frontiers — platforms other than JVM, one of them being iOS.</p>\n<p>Kotlin started out with compilation to .class files which allowed interoperability with Java and conversion to .dex for Android. But now with <a href=\"https://github.com/JetBrains/kotlin-native\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kotlin Native</a>, kotlin can target platforms which directly execute bytecode without a VM — emebedded systems, macOS and <strong>iOS.</strong></p>\n<p>Let’s look at an example</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> API_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"abdfkdfgl453\"</span>\n<span class=\"token keyword\">class</span> Helper <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> second<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">sliceFilterAndSort</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n            list<span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">sortedBy</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> helperId<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">getHelperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"Helper234\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Model</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">var</span> id<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">var</span> type<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Above is a simple piece of code with multiple classes and variables written in kotlin. Important thing to note is that it is not importing any library except for <em>kotlin-stdlib</em></p>\n<p>And here is a build.gradle for compiling this code into a jar</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">group <span class=\"token string\">'io.github.jitinsharma'</span>\nversion <span class=\"token string\">'1.0-SNAPSHOT'</span>\n\nbuildscript <span class=\"token punctuation\">{</span>\n    ext<span class=\"token punctuation\">.</span>kotlin_version <span class=\"token operator\">=</span> <span class=\"token string\">'1.2.21'</span>\n\n    repositories <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    dependencies <span class=\"token punctuation\">{</span>\n        classpath <span class=\"token string gstring\">\"org.jetbrains.kotlin:kotlin-gradle-plugin:<span class=\"token expression\"><span class=\"token punctuation\">$</span>kotlin_version</span>\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'java'</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'kotlin'</span>\n\nsourceCompatibility <span class=\"token operator\">=</span> <span class=\"token number\">1.8</span>\n\nrepositories <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    compile <span class=\"token string gstring\">\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:<span class=\"token expression\"><span class=\"token punctuation\">$</span>kotlin_version</span>\"</span>\n<span class=\"token punctuation\">}</span>\n\ncompileKotlin <span class=\"token punctuation\">{</span>\n    kotlinOptions<span class=\"token punctuation\">.</span>jvmTarget <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"1.8\"</span>\n<span class=\"token punctuation\">}</span>\ncompileTestKotlin <span class=\"token punctuation\">{</span>\n    kotlinOptions<span class=\"token punctuation\">.</span>jvmTarget <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"1.8\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we’ll compile this to a .jar using <em>./gradlew assemble</em> and then import this to an Android Project.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*GGGoF41MuTlrN4zoj_zUaQ.png\" alt=\"Classes Generated\"></p>\n<p>We can see three class files generated from Base.kt</p>\n<ul>\n<li>BaseKt.class — For constant API_KEY variable</li>\n<li>Helper and Model both of which are seperate classes</li>\n</ul>\n<p>Now we can simple call this code in an Activity in a very straightforward way</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n       <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">val</span> helper <span class=\"token operator\">=</span> <span class=\"token function\">Helper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">val</span> sum <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n       sumView<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Sum: \"</span> <span class=\"token operator\">+</span> sum\n\n       <span class=\"token keyword\">val</span> modifiedList <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">sliceFilterAndSort</span><span class=\"token punctuation\">(</span>\n               <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adam\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Aakash\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Enrique\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Abhishek\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>modifiedList<span class=\"token punctuation\">)</span>\n\n       <span class=\"token keyword\">val</span> helperId <span class=\"token operator\">=</span> Helper<span class=\"token punctuation\">.</span>helperId\n       <span class=\"token keyword\">val</span> helperType <span class=\"token operator\">=</span> Helper<span class=\"token punctuation\">.</span><span class=\"token function\">getHelperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$helperId</span> <span class=\"token interpolation variable\">$helperType</span>\"</span><span class=\"token punctuation\">)</span>\n\n       <span class=\"token keyword\">val</span> model <span class=\"token operator\">=</span> <span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">val</span> model2 <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n       <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>model2<span class=\"token punctuation\">)</span>\n\n       <span class=\"token keyword\">val</span> key <span class=\"token operator\">=</span> API_KEY\n       <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"moving-to-ios\" style=\"position:relative;\"><a href=\"#moving-to-ios\" aria-label=\"moving to ios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Moving to iOS</h2>\n<p>Let’s see if we can reproduce similar approach for iOS using Kotlin Native plugin.</p>\n<p>In a folder above our Base project, we’ll add following build.gradle</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">buildscript <span class=\"token punctuation\">{</span>\n    ext<span class=\"token punctuation\">.</span>kotlin_native_version <span class=\"token operator\">=</span> <span class=\"token string\">'0.6'</span>\n    repositories <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        maven <span class=\"token punctuation\">{</span>\n            url <span class=\"token string gstring\">\"https://dl.bintray.com/jetbrains/kotlin-native-dependencies\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    dependencies <span class=\"token punctuation\">{</span>\n        classpath <span class=\"token string gstring\">\"org.jetbrains.kotlin:kotlin-native-gradle-plugin:<span class=\"token expression\"><span class=\"token punctuation\">$</span>kotlin_native_version</span>\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ngroup <span class=\"token string\">'io.github.jitinsharma'</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"konan\"</span>\nkonan<span class=\"token punctuation\">.</span>targets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string gstring\">\"iphone\"</span><span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"iphone_sim\"</span><span class=\"token punctuation\">]</span>\nkonanArtifacts <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">framework</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Base'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        srcDir <span class=\"token string\">'base/src/main/kotlin'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Few things to note</p>\n<ul>\n<li><strong>konan</strong> is the plugin for Kotlin Native which allows targeting kotlin code to multiple platforms</li>\n<li>konan.targets specify for which targets bytecode must be generated. We can also add other platform like <em>raspberry pi</em> to it.</li>\n<li>konanArtifacts will specify artifacts to be generated along with their name and src directory if required.</li>\n</ul>\n<p>We will run <em>./gradlew build</em> on this which will produce the following</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3944/1*nn6AHDhQU7Zvz9FBI4k4sg.png\" alt=\"Objective C framework created after build\"></p>\n<p>We now have a file named <strong>Base.framework</strong> which is an <strong>iOS framework</strong> file and can be directly imported to Xcode. Let’s do that!</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*yqpst-IZIxBYesSVAm57IA.png\" alt=\"Link framework file to a project\"></p>\n<p>We have received something called <strong>Base.h **from the framework which contains code converted from **Base.kt</strong> .</p>\n<p>Header files are a little complex to read but Xcode provides Swift conversion of such files for better understanding. Here is an excerpt of what is present in header file</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Foundation</span>\n\nopen <span class=\"token keyword\">class</span> <span class=\"token class-name\">KotlinBase</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSObject</span> <span class=\"token punctuation\">{</span>\n   open <span class=\"token keyword\">class</span> <span class=\"token class-name\">func</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">KotlinBase</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSCopying</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\nopen <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseHelper</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">KotlinBase</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   open <span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">first</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int32</span><span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int32</span>\n   open <span class=\"token keyword\">func</span> <span class=\"token function\">sliceFilterAndSort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nopen <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseHelperCompanion</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">KotlinBase</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">convenience</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   open <span class=\"token keyword\">func</span> <span class=\"token function\">getHelperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span>\n   open <span class=\"token keyword\">var</span> helperId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int32</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nopen <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">KotlinBase</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int32</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n   open <span class=\"token keyword\">func</span> <span class=\"token function\">component1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int32</span>\n   open <span class=\"token keyword\">func</span> <span class=\"token function\">component2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span>\n   open <span class=\"token keyword\">func</span> <span class=\"token function\">doCopy</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int32</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">BaseModel</span>\n   open <span class=\"token keyword\">var</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int32</span>\n   open <span class=\"token keyword\">var</span> type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\nopen <span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">KotlinBase</span> <span class=\"token punctuation\">{</span>\n   open <span class=\"token keyword\">class</span> <span class=\"token class-name\">func</span> <span class=\"token function\">API_KEY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>By default a class named **KotlinBase **is created which extends NSObject and also implements NSCopying and all other classes extend this class.</li>\n<li>All classes have prefix “Base” which is the name we provided in build.gradle while creating the iOS framework</li>\n<li><strong>Int</strong> from Kotlin is converted to <strong>Int32</strong> in Swift not <em>Int(Swift).</em></li>\n<li>Kotlin’s List<T> is converted to a Swift Array.</li>\n<li>Companion object is converted to a separate class with an init() method.</li>\n<li>Module level constant API_KEY is converted to an function within a class.</li>\n<li>**BaseModel **which is derived from a data class has a function *doCopy *similar to copy() of data class. But default initialization or copy is not possible as all arguments must be specified while initializing or copying.</li>\n</ul>\n<p>Now let’s try to call these functions from a Swift file</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIViewController</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> sumView<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITextField</span><span class=\"token operator\">!</span>\n   <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">let</span> base <span class=\"token operator\">=</span> <span class=\"token function\">BaseHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       \n       sumView<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Sum: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">)</span></span>\"</span>\n       <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">sliceFilterAndSort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Adam\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Aakash\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Enrique\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Abhishek\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n       value<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n           <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n       \n       <span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token function\">BaseModel</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"model1\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">let</span> model2 <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">doCopy</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span>\n       <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>model2<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n       \n       <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token builtin\">Base</span><span class=\"token punctuation\">.</span><span class=\"token function\">API_KEY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">let</span> helperId <span class=\"token operator\">=</span> <span class=\"token builtin\">BaseHelperCompanion</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>helperId\n       <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n       <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>helperId<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*MdYOXbj0Mpias_biYP2xDw.gif\"></p>\n<p>So we took a piece of raw Kotlin code and ran it on multiple platforms without actually changing anything on the platform side code. Although above code may not be useful for production level applications, but in future as Kotlin Native and Kotlin Mutliplatform gets mature, we should be able to move more logic towards a common project.</p>\n<p><a href=\"https://github.com/Kotlin/kotlinx.serialization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kotlinx Serialization</a> is a library built on this concept and supports JVM/JS for now with native support coming soon. With this we should be able to serialize/deserialize data classes to JSON on all platforms with single lib.</p>\n<p>Full code here:\n<a href=\"https://github.com/jitinsharma/kotlin_multi_target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>https://github.com/jitinsharma/kotlin<em>multi</em>target</strong></a></p>\n<p>Thanks for reading!</p>","fields":{"slug":"/posts/targeting-kotlin-for-android-ios/","tagSlugs":["/tag/kotlin/","/tag/i-os/","/tag/multiplatform/"]},"frontmatter":{"date":"2018-03-21","description":"Kotlin has been traditionally used as a language for JVM based platforms and has become highly popular in Android ecosystem. As the language matures, it is knocking on new frontiers — platforms other than JVM, one of them being iOS.","tags":["Kotlin","iOS","Multiplatform"],"title":"Targeting Kotlin for both Android and iOS","banner":null}}},"pageContext":{"slug":"/posts/targeting-kotlin-for-android-ios/"}},"staticQueryHashes":["1122560877","251939775","401334301"]}