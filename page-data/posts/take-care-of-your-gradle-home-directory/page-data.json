{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/take-care-of-your-gradle-home-directory/","result":{"data":{"markdownRemark":{"id":"92edc712-28e1-588f-88c0-be3d01a85ad7","html":"<p>It was just another day of building my Android project on Macbbook when my build failed with a very strange error.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> A failure occurred while executing com.android.build.gradle.tasks.PackageAndroidArtifact$IncrementalSplitterRunnable\n   > java.io.IOException: No space left on device</code></pre></div>\n<p>I checked Storage Manager and it showed me <code class=\"language-text\">16MB</code> of free space left. Welp!</p>\n<p>I had suddenly run out of all my disk memory. Now Iâ€™ve had problems with my storage of my MacBook in past too but the situation never became this dire. To get things working fast, I removed all local docker images and caches to reclaim around 10GB of memory enough to get my work going.</p>\n<p>I remained skeptical since then where is disk memory going, since I could not find anything suspicious in Storage Manager.</p>\n<p>At this point I already know my usual culprits - docker images, emulator images, Android sdk platform sources but I had already optimised these few days ago so these definitely didnâ€™t cause any problem.</p>\n<p>So I poked at my <code class=\"language-text\">.gradle</code> folder and found itâ€™s size to be <code class=\"language-text\">28GB</code>. ðŸ¤¯</p>\n<p>The first thought was to check downloaded library caches in <code class=\"language-text\">caches/modules-2/files-2.1</code>. It was around <code class=\"language-text\">1.5GB</code>, nothing suprising here.</p>\n<p>So I decided to dissect the whole <code class=\"language-text\">.gradle</code> folder and try to find out where all the storage is going.</p>\n<p>Guess what I found</p>\n<p><code class=\"language-text\">.gradle/daemon/</code> folderâ€™s size was ~<code class=\"language-text\">15GB</code>. All this folder had was log files!</p>\n<p>But how did this happen.</p>\n<p>Now this folder contains hundreds of log files for daemons spawned by different versions of gradle</p>\n<p><img src=\"media/take-care-of-your-gradle-home-directory/daemon-directory.png\" alt=\"\"></p>\n<p>Most of the log files in these folder are 1-2 MB or less. But then I found some log files whose size was ~1GB and even ~5GB!</p>\n<div class=\"image-container\">\n    <div style=\"float:left;margin-right:5px;\">\n        <img src=\"/media/take-care-of-your-gradle-home-directory/daemon-size-1.png\"/>\n    </div>\n    <div style=\"float:left;margin-right:5px;\">\n        <img class=\"middle-img\" src=\"/media/take-care-of-your-gradle-home-directory/daemon-size-2.png\"/>\n    </div>\n</div>\n<br>\n<br>\n<p>Very suspicious!</p>\n<h2 id=\"travelling-back-in-time--1-month\" style=\"position:relative;\"><a href=\"#travelling-back-in-time--1-month\" aria-label=\"travelling back in time  1 month permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Travelling back in time ~ 1 month</h2>\n<p>Almost a month ago, one fine day I was hit with this error when I was trying to build my projects</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Failed to execute org.gradle.cache.internal.AsyncCacheAccessDecoratedCache$2@1204453a.\njava.lang.StackOverflowError\n\tat org.gradle.cache.internal.btree.FreeListBlockStore$FreeListBlock.alloc(FreeListBlockStore.java:222)</code></pre></div>\n<p>This error didnâ€™t really block my build, and since Android Studio trims down long outputs I never fully realised how many exceptions I was actually getting. This happened across multiple projects with different gradle versions over a course of few days.</p>\n<p>I eventually found(though stackoverflow, ofcourse) that deleting <code class=\"language-text\">caches/journal-1</code> fixes this issue since itâ€™s cause by corruption of entries in this folder - <code class=\"language-text\">file-access.bin</code>, <code class=\"language-text\">journal-1.lock</code> and they are regenerated if not available.</p>\n<p>From what I understand <code class=\"language-text\">journal-1.lock</code> is used by gradle cache and itâ€™s corruption was probably root of all exceptions.</p>\n<p>Once I regenrated <code class=\"language-text\">caches/journal-1</code>, my builds started showing normal outputs.</p>\n<p>Now back to problem at hand.</p>\n<p>I guess you have figured out by now what those large log files contained. Lines and lines of this exception</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">java.lang.StackOverflowError\n\tat org.gradle.cache.internal.btree.FreeListBlockStore$FreeListBlock.alloc(FreeListBlockStore.java:222)</code></pre></div>\n<p>The largest log file had ~<code class=\"language-text\">49,000,000</code> lines of exception. Thank god, Sublime text didnâ€™t throw a StackOverflow error on opening it (pun intended)</p>\n<p>I checked <code class=\"language-text\">./gradle/daemon</code> throroughly and found out 4 days of logs were consuming ~<code class=\"language-text\">10GB</code> of disk memory!</p>\n<h3 id=\"take-care-of-your-gradle-home-directory\" style=\"position:relative;\"><a href=\"#take-care-of-your-gradle-home-directory\" aria-label=\"take care of your gradle home directory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Take care of your gradle home directory</h3>\n<p>and donâ€™t ignore errors in build like me ðŸ˜…</p>\n<p>Here are few more tips for optimising disk memory when it comes to gradle</p>\n<ul>\n<li>Iâ€™m a heavy user of Android Studio Canary, which means I have multiple installations of different gradle versions sitting in my machine.</li>\n</ul>\n<p>By default <code class=\"language-text\">.gradle</code> folders bifurcates a lot of settings by gradle versions as separate folders.\nItâ€™s a good idea to poke around your <code class=\"language-text\">.gradle</code> folder routinely and delete whatâ€™s not needed. I had folders for gradle versions as old as <code class=\"language-text\">4.10</code> which were not deleted.</p>\n<ul>\n<li>\n<p>Gradle downloads and caches all wrapper distributions in <code class=\"language-text\">/wrapper/dists</code>. If you often juggle between rc/stable versions of Gradle, you can expect this to swell up as well. Also sometimes Android Studio suggests you to download gradle distribution with sources to inspect gradle script sources. You can avoid this unless you actually want to inspect sources of gradle script, otherwise <code class=\"language-text\">wrapper/dists</code> will have two copies of gradle wrapper(<code class=\"language-text\">-all</code> and <code class=\"language-text\">-bin</code>). <code class=\"language-text\">-all</code> distribution folders are usually 200+mb larger than <code class=\"language-text\">-bin</code> (multiply by number of versions you have on machine)</p>\n</li>\n<li>\n<p>If your builds have build cache enabled, you might want to look at <code class=\"language-text\">/caches/build-cache-1</code> too.</p>\n</li>\n<li>\n<p>Get a new macbook with more disk memory.</p>\n</li>\n</ul>\n<p><em>Gradle is smart too</em></p>\n<p>I was pleasantly surprised that my <code class=\"language-text\">caches/modules-2/files-2.1</code> was only 1.5GB. This is because Gradle automatically cleans up library <a href=\"https://docs.gradle.org/current/userguide/directory_layout.html#dir:gradle_user_home:cache_cleanup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cache, wrapper dists</a> and <a href=\"https://docs.gradle.org/current/userguide/build_cache.html#sec:build_cache_configure_local\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build cache</a> with time period of 7-30 days. Also Build cache can be cleaned by running <code class=\"language-text\">./gradlew cleanBuildCache</code>.</p>\n<p>Unfortunately I believe this does not apply to log files(<a href=\"https://github.com/gradle/gradle/issues/8795\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">open issue</a>), since my log files were more than 30 days old and did not get deleted.</p>\n<p>Fin.</p>","fields":{"slug":"/posts/2021-25-01---take-care-of-your-gradle-home-directory//posts/take-care-of-your-gradle-home-directory","tagSlugs":["/tag/android/","/tag/gradle/"]},"frontmatter":{"date":"2021-01-25","tags":["Android","Gradle"],"title":"Take care of your gradle home directory","description":"An accidental discovery of disk memory impacts of gradle home directory","slug":"/posts/take-care-of-your-gradle-home-directory","socialImage":null}}},"pageContext":{"slug":"/posts/2021-25-01---take-care-of-your-gradle-home-directory//posts/take-care-of-your-gradle-home-directory"}},"staticQueryHashes":["4208939363"],"slicesMap":{}}